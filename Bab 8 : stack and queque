#Stack 
print("STACK SCRIPT ")
class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

class Stack:
    def __init__(self, value):
        new_node = Node(value)
        self.top = new_node
        self.height = 1
    
    def print_stack(self):
        temp = self.top
        while temp is not None:
            print(temp.value)
            temp = temp.next
    
    def push(self, value):
        new_node = Node(value)
        if self.height == 0:
            self.top = new_node
        else:
            new_node.next = self.top
            self.top = new_node
        self.height += 1
    
    def pop(self):
        if self.height == 0:
            return None
        temp = self.top
        self.top = self.top.next
        temp.next = None
        self.height -= 1
        return temp


print("=====================================================")
print("Awalan : ")
my_stack = Stack(4)
my_stack = Stack(11)
my_stack = Stack(9)
my_stack = Stack(1)
my_stack = Stack(5)
print('top : ', my_stack.top.value)
print('height : ', my_stack.height)
print("=====================================================")
print("Fungsi push : ")
my_stack = Stack(4)
my_stack = Stack(11)
print("sebelum menggunakan fungsi push : ")
my_stack.print_stack()
my_stack.push(1)
print("setelah menggunakan fungsi push : ")
my_stack.print_stack()
print("=====================================================")
my_stack = Stack(4)
my_stack.push(3)
my_stack.push(2)
my_stack.push(1)
print("sebelum menggunakan fungsi pop : ")
my_stack.print_stack()
print("angka yang di pop : ")
print(my_stack.pop().value)
print("setelah menggunakan fungsi pop : ")
my_stack.print_stack()
print("=====================================================")




print("=====================================================")
#Que Que 
print("Que-Que SCRIPT ")
class Node:
    def __init__ (self, value):
        self.value = value
        self.next = None
class Queue:
    def __init__(self, value):
        new_node = Node(value)
        self.first = new_node
        self.last = new_node
        self.lenght = 1
    
    def print_queue(self):
        temp = self.first
        while temp is not None:
            print(temp.value)
            temp = temp.next
    
    def enqueue(self, value):
        new_node = Node(value)
        if self.first is None:
            self.first = new_node
            self.last = new_node
        else:
            self.last.next = new_node
            self.last = new_node
        self.lenght += 1
        return True
    
    def dequeue(self):
        if self.lenght == 0:
            return None
        temp = self.first
        if self.lenght == 1:
            self.first = None
            self.last = None
        else:
            self.first = self.first.next
            temp.next = None
        self.lenght -= 1
        return temp

print("Awalan : ")
my_queue = Queue(4)
my_queue = Queue(5)
my_queue = Queue(8)
my_queue.print_queue()
print("=====================================================")
my_queue = Queue(4)
my_queue = Queue(5)
print("sebelum menggunakan fungsi enqueque : ")
my_queue.print_queue()
my_queue.enqueue(2)
print("setelah menggunakan fungsi enqueque : ")
my_queue.print_queue()
print("=====================================================")
print("menggunakan dequeque : ")
my_queue = Queue(1)
my_queue.enqueue(2)
print(my_queue.dequeue().value)
print(my_queue.dequeue().value)
print(my_queue.dequeue())
print("=====================================================")
