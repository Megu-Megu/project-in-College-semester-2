class Graph :
    def __init__(self):
        self.adj_list = {}

    def print_graph(self):
        for vertex in self.adj_list:
            print(vertex, ":" , self.adj_list[vertex])

    def add_vertex(self,vertex):
        if vertex not in self.adj_list.keys():
            self.adj_list[vertex] = []
            return True
        return False
    
    def avoidDuplicateadAppend(self,listTarget, value):
        if value not in listTarget:
            listTarget.append(value)
            return True
        return False

    def add_edge(self, v1 , v2):
        if v1 in self.adj_list.keys() and v2 in self.adj_list.keys():
            self.avoidDuplicateadAppend(self.adj_list[v1],v2)
            self.avoidDuplicateadAppend(self.adj_list[v2],v1)
        return False
    
    def remove_edge(self,v1,v2):
        if v1 in self.adj_list.keys() and v2 in self.adj_list.keys():
            try:
                self.adj_list[v1].remove(v2)
                self.adj_list[v2].remove(v1)
            except ValueError:
                pass
            return True
        return False

    def remove_vertex(self, vertex):
        if vertex in self.adj_list.keys():
            for other_vertex in self.adj_list[vertex]:
                self.adj_list[other_vertex].remove(vertex)
            del self.adj_list[vertex]
            return True
        return False

    def printAllConnected(self,vertex):
        if self.adj_list == {} : return False
        print(f"data di {vertex} vertex ==> ", end="" )
        for data in self.adj_list[vertex]:
            print(data, end=", " if data != self.adj_list[vertex][-1] else "")
            print("");return True



print("="*50)
print("percobaan pertama : hanya menampilkan menggunakan fungsi print graph : ")
my_graph = Graph()
my_graph.add_vertex("A")
my_graph.print_graph()

print("="*50)
print("menggunakan fungsi add untuk menambah edge : ")
my_graph = Graph()
my_graph.add_vertex(1)
my_graph.add_vertex(2)
my_graph.add_edge(1, 2)
my_graph.print_graph()

print("="*50)
print("mengunkaan fungsi remove untuk menghilangkan edge : ")
my_graph = Graph()
my_graph.add_vertex("A")
my_graph.add_vertex("B")
my_graph.add_vertex("C")
my_graph.add_edge("A","B")
my_graph.add_edge("B","C")
my_graph.add_edge("C","A")
print("grpah sebelum di hapus menggunakan remove edge : ")
my_graph.print_graph()
print("graph setelah menggunakan fungsi remove edge  : ")
my_graph.remove_edge("A", "C")
my_graph.print_graph()

print("="*50)
my_graph = Graph()
my_graph.add_vertex("A")
my_graph.add_vertex("B")
my_graph.add_vertex("C")
my_graph.add_vertex("D")
my_graph.add_edge("A","B")
my_graph.add_edge("A","C")
my_graph.add_edge("A","D")
my_graph.add_edge("B","D")
my_graph.add_edge("C","D")
print("sebelum menggunakan fungsi remove vertex : ")
my_graph.print_graph()
print("sebelum menggunakan fungsi remove vertex : ")
my_graph.remove_vertex("D")
my_graph.print_graph()

print("="*50)
my_graph= Graph()
my_graph.add_vertex("A")
my_graph.add_vertex("B")
my_graph.add_vertex("C")
my_graph.add_vertex("D")
my_graph.add_edge("A","B")
my_graph.add_edge("A","C")
my_graph.add_edge("A","D")
my_graph.add_edge("B","D")
my_graph.add_edge("C","D")
print("setelah menggunkaan fumgsi print ALL : ")
my_graph.printAllConnected("A")
my_graph.printAllConnected("D")

print("="*50)
if __name__ == "__main__":
    my_graph = Graph()
    listVertex = [12,76,44,18,52,27,82]
    listVertex = [str(data) for data in listVertex]
    for vertex in listVertex : my_graph.add_vertex(vertex)

    #21 vertex
    my_graph.add_edge(listVertex[0], listVertex[1])
    my_graph.add_edge(listVertex[0], listVertex[2])
    my_graph.add_edge(listVertex[0], listVertex[3])

    #76 vertex
    my_graph.add_edge(listVertex[1], listVertex[0])
    my_graph.add_edge(listVertex[1], listVertex[2])

    #44 vertex
    my_graph.add_edge(listVertex[2], listVertex[1])
    my_graph.add_edge(listVertex[2], listVertex[0])
    my_graph.add_edge(listVertex[2], listVertex[3])

    #18 verex
    my_graph.add_edge(listVertex[3], listVertex[0])
    my_graph.add_edge(listVertex[3], listVertex[2])
    my_graph.add_edge(listVertex[3], listVertex[4])

    #52 vertex
    my_graph.add_edge(listVertex[4], listVertex[3])
    my_graph.add_edge(listVertex[4], listVertex[5])

    #27 vertex
    my_graph.add_edge(listVertex[5], listVertex[4])
    my_graph.add_edge(listVertex[5], listVertex[6])

    #82 vertex
    my_graph.add_edge(listVertex[6], listVertex[5])
    my_graph.print_graph() #untuk print semua value

    #menunjukan semua vertex yang terkoneksi 
    my_graph.printAllConnected(listVertex[3])
    
